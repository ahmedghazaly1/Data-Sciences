# -*- coding: utf-8 -*-
"""DataScienceTask1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mmz0XVjAGoLA_FECaxE0a3s9YCKONjRk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load the dataset
df = pd.read_csv("/content/heart.csv")

# Display first and last 12 rows
print("First 12 rows:")
print(df.head(12))
print("Last 12 rows:")
print(df.tail(12))

# Identify total number of rows and columns
print(f"Dataset contains {df.shape[0]} rows and {df.shape[1]} columns.")

# List all column names and data types
print("Column names and data types:")
print(df.dtypes)

# Print the name of the first column
print("First column name:", df.columns[0])

# Generate a summary of the dataset
print("Dataset summary:")
print(df.info())
print(df.describe())

# Check column names to avoid KeyError
print("Actual column names:", df.columns)

# Choose a categorical attribute
categorical_column = "Sex"  # Adjusted based on actual column names
if categorical_column in df.columns:
    print(f"Unique values in {categorical_column}:", df[categorical_column].unique())
    print(f"Most frequent value in {categorical_column}:", df[categorical_column].mode()[0])
else:
    print(f"Column '{categorical_column}' not found in dataset.")

# Statistical analysis
numerical_column = "Age"  # Adjusted based on actual column names
if numerical_column in df.columns:
    print(f"Mean: {df[numerical_column].mean()}")
    print(f"Median: {df[numerical_column].median()}")
    print(f"Standard Deviation: {df[numerical_column].std()}")
    print(f"20th Percentile: {np.percentile(df[numerical_column], 20)}")
else:
    print(f"Column '{numerical_column}' not found in dataset.")

# Data Preparation Tasks
if numerical_column in df.columns:
    filtered_df = df[df[numerical_column] > 50]  # Example filter
    print("Filtered data:")
    print(filtered_df.head())

# Check for duplicate rows
duplicates = df.duplicated().sum()
print(f"Total duplicate rows: {duplicates}")
if duplicates > 0:
    df = df.drop_duplicates()
    print("Duplicates removed.")

# Convert data type
if numerical_column in df.columns:
    df[numerical_column] = df[numerical_column].astype(str)

# Missing values check and handling
missing_values = df.isnull().sum()
print("Missing values per column:")
print(missing_values)
df.fillna(df.select_dtypes(include=[np.number]).median(), inplace=True)

# Binning
if numerical_column in df.columns:
    df["Age_bin"] = pd.cut(df[numerical_column].astype(float), bins=5)
    print(df["Age_bin"].value_counts())

# Find row with max value of a numerical feature
if numerical_column in df.columns:
    max_row = df.loc[df[numerical_column].astype(float).idxmax()]
    print("Row with maximum age:")
    print(max_row)

# Visualization
if numerical_column in df.columns:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x=df[numerical_column].astype(float))
    plt.title("Boxplot of Age")
    plt.show()

    plt.figure(figsize=(6, 4))
    df[numerical_column].astype(float).hist(bins=20)
    plt.title("Histogram of Age")
    plt.xlabel("Age")
    plt.ylabel("Count")
    plt.show()

# Scatterplot example
if "Serum_Creatinine" in df.columns and numerical_column in df.columns:
    sns.scatterplot(x=df[numerical_column].astype(float), y=df["Serum_Creatinine"].astype(float))
    plt.title("Scatterplot: Age vs Serum Creatinine")
    plt.show()

# Normalize data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df.select_dtypes(include=[np.number]))

# PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(df_scaled)

plt.scatter(pca_result[:, 0], pca_result[:, 1])
plt.title("PCA Visualization")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
numeric_df = df.select_dtypes(include=[np.number])
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Class distribution
if "DEATH_EVENT" in df.columns:
    print("Class distribution:")
    print(df["DEATH_EVENT"].value_counts())

# Feature Engineering
if numerical_column in df.columns:
    df["Age_squared"] = df[numerical_column].astype(float) ** 2
    print("New feature 'Age_squared' added.")